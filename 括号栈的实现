#include "stdio.h"
#include "stdlib.h"
#define M 10

typedef char StackElemType;
typedef  struct 
{
  StackElemType date[M];
  int top;
}SqStack;

//
void Init_S(SqStack *&S);//初始化
void Clear_S(Sqstack &S);//销毁栈
int Len_S(SqStack *S);//求长度
int StackEmpty(SqStack *S);//判断栈空
int Push(SqStack *&S,ElemType e);//进栈
int Pop(SqStack *&S,ElemType &x);//出zhan
int GetTop(LiStack *S,ElemType &e);//quzhanding yuansu
void DispStack(SqStack *S);//xianshi zhanzhong yuansu

//
void Init_S(SqStack *&S)
{
  S= (SqStack*)malloc(sizeof(SqStack));
  S->top=1;
}

//
void Clear_S(Sqstack &S)//销毁栈
{
  free(S);
}

int Len_S(SqStack *S)//求长度
{
  return (S->top+1);
}

int StackEmpty(SqStack *S)//判断栈空
{
  return(S->top==-1);
}

int Push(SqStack *&S,ElemType e)//进栈
{
  if(S->top == M-1) return 0;
  S->top++;
  S->data[S->top]=e;
  return 1;//?????
}

int Pop(SqStack *&S,ElemType &x)//出zhan
{
  if(S->tpo == -1) return 0;
  e= S->data[S->top];
  S->top--;
  return 1;
}

int GetTop(LiStack *S,ElemType &e)//quzhanding yuansu
{
  if(S->top == -1) return 0;
  e=S->data[S->top];
  return 1;
}

void DispStack(SqStack *S)//xianshi zhanzhong yuansu
{
  int i;
  for( i =S->top;i>=0; i--)
      printf("%c", s->date[i]);
      printf("\n" );
}

//表达式求值
void trans(char str[], char exp[]);//将算术表达式转换后缀表达式
float compvalue(char exp[]);//后缀求值

//
void trans(char str[], char exp[])//将算术表达式转换后缀表达式
{
  struct 
  {
    char data[M];
    int top;
  }op;
  char ch;
  int i=0,t=0;
  op.top=-1;
  ch=str[i];    i++;
      while(ch!='\0')
      {
        switch(ch)
        {
          case'(': 
                  op.top++;op.data[op.top]=ch; break;
          case')':
                  while (op.data[op.top]!='(') {
                    exp[t]=op.data[op.top];
                    op.top--;t++;
                  }
                  op.top--;break;
          case'+':
          case'-':
                  while(op.top!=-1 && op.data[op.top]!='(')
                  {
                    exp[t]=op.data[op.top];
                    op.top--;
                    t++;
                  }
                  op.top++; op.data[op.top]=ch;break;
          case'*':
          case'/':
                  while(op.data[op.top] == '*'|| op.data[op.top] == '/')
                  {
                    exp[t]=op.data[op.top];
                    op.top--;t++;
                                        
                  }
                  op.top++;op.data[op.top]=ch;break;
          case' ':break;
          default:
                  while(ch>='0' && ch <= '9')
                  {
                    exp[t]=ch;t++;
                    ch=str[i];i++;
                  }
                  i--;
                  exp[t]='#';t++;
        }
        ch=str[i];i++;
      }
      while (op.top!=-1)
      {
        exp[t]=op.data[op.top];
        t++;
        op.top--;
      }
      exp[t]='\0';
}
